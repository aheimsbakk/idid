#!/bin/bash

function alert {
    echo "$@" >&2
}

function die {
    alert "$@"
    exit 1;
}

function ask {
    answer="$1"; shift
    [[ -z "$answer" ]] && read -i "N" -p "$@ (y/N) " answer
    [[ "${answer:0:1}" == [yY] ]] && return 0
    die "! user abort"
}

function git_commit {
    [[ -d "$GIT" ]] || return
    git -C "$STR" commit -m "$1"    
}

function git_add {
    [[ -d "$GIT" ]] || return
    git -C "$STR" add ${@:1:${#@}-1}
    [[ -n $(git -C "$STR" status --porcelain ${@:1:${#@}-1}) ]] || return
    git_commit "${@:${#@}:1}"
}

function cat_logs {
    find $STR -type f -name \*log -regex "$1" -exec cat {} \; 
}

function cat_tags {
    cat_logs "$1" | egrep -o "$2[^ ]+" | sort | uniq -c 
}

function cmd_ls {
	IFS="," eval 'echo "- listing: $*"'
	local terms="*$(printf '%s*|*' "$@")"
    tree -C --noreport --prune --matchdirs --ignore-case -P "${terms%|*}" "$STR" | tail -n +2 | sed 's/\.log//g'
}

function cmd_log {
    [[ -z "$@" ]] && die "usage: $PRG $CMD [-a] [subfolder] [partial date]" 
    while getopts ":a" opt; do case $opt in
        a) shift;;
        ?) die "! invalid option: $PRG $CMD -$OPTARG";;
    esac; done    
    IFS="," eval 'echo "- finding: $*"'
	local terms=".*$(printf '%s.*' "$@")" #"
    cat_logs "$terms" | sort 
}

function cmd_tags {
    [[ -z "$@" ]] && die "usage: $PRG $CMD [-a] [subfolder] [partial date]" 
    while getopts ":a" opt; do case $opt in
        a) shift;;
        ?) die "! invalid option: $PRG $CMD -$OPTARG";;
    esac; done    
    IFS="," eval 'echo "- # tags in: $*"'
	local terms=".*$(printf '%s.*' "$@")" #"
    cat_tags "$terms" "#"  
    echo
    IFS="," eval 'echo "- @ tags in: $*"'
    cat_tags "$terms" "@"  
}

function cmd_add {
    while getopts ":d:ay" opt; do case $opt in
        d) local DEF="$OPTARG";;
        a) local auto="auto";;
        y) local yes="y";;
        \?) die "! invalid option: $PRG $CMD -$OPTARG"
    esac; done 
    local line="${@:$OPTIND}"
    [[ -z "$line" ]] && die "usage: $PRG $CMD [-a] [-d subfolder] changelog text"
    local partial_line="${auto:-manual} - $DEF - $line"
    local full_line="$NOW_DATE $NOW_TIME - $partial_line"
    local log_file="$DEF/$NOW_DATE.log"
    echo - logging to \"$log_file\"
    echo "$full_line"
    [[ -d "$STR/$DEF" || ! -z "$yes" ]] || ask "$yes" "- subfolder '$DEF' don't exist, create?" 
    ask "$yes" "- commit change?" 
    mkdir -p "$STR/$DEF"
    echo "$full_line" >> "$STR/$log_file"
    git_add $log_file "$partial_line"
}

function last_files {
    terms="$1"; shift
    if ! date -d "$*"  > /dev/null 2>&1; then
        die "! incorrect date format, see \"date -d\" for format"
    fi
    local query_second=$(date -d "$*" +%s)
    for f in $(find $STR -type f -name \*log -regex "$terms"); do
        local file_date=$(echo $f | egrep -o '[[:digit:]]{4}-[[:digit:]]{2}-[[:digit:]]{2}') 
        local file_second=$(date -d $file_date +%s)
        if [[ $query_second -lt $file_second ]]; then
            echo $f
        fi
    done
}

function cmd_last {
    [[ -z "$@" ]] && die "usage: $PRG $CMD [-d subfolder] -- date -d argument" 
    while getopts ":d:a" opt; do case $opt in
        d) local subfolder="$OPTARG";;
        ?) die "! invalid option: $PRG $CMD -$OPTARG";;
    esac; done
    local terms=".*$(printf '%s.*' "$subfolder")" #"
    last_files "$terms" "${@:OPTIND}" | xargs cat | sort
}

function cmd_git {
    if [[ "$1" == "init" ]]; then
        git $1 "$STR" 
        local logs=$(find "$STR" -type f -name \*log -printf "%P\n")
        git_add $logs 'initial commit' 
    elif [[ -d "$GIT" ]]; then
        git -C "$STR" ${@}
    else
        die "! $PRG is not a git repository, run \"$PRG git init\""
    fi

}

function cmd_version {
    cat <<EOF
git based simple changelog for use with grep. multiple users can use 
this tool as long they remember to pull and push to a central repository.
set environment variable IDID_STORE to change the changelog store folder 
location.

set IDID_SUBFOLDER environment variable or use the -d option to change 
the default store subfolder.

this program is heavly inspired from pass, the standard unix password 
manager. look at https://www.passwordstore.org/. 

version:
    0.8
    
author:
    arnulf heimsbakk
    https://github.com/aheimsbakk/idid
EOF
}

function cmd_help {
    cmd_version
    cat <<EOF
    
usage:
    $PRG [-s folder] add [-a] [-y] [-d subfolder] changelog free text 
        add a changelog line in the the specified directory structure.
        
        -a  mark log entry as done from script, automatic 
        -d  destination directory for changelog, if not specified
            it defaults to bash \$USER variable, currently "$USER"
        -y  answer yes to all questons

    $PRG [-s folder] list [subfolder]
        list directory structure and changelog files.
        
    $PRG [-s folder] log [-a|subfolder] [partial date]
        list changelog, filter on subfolder and parts of a date on the
        format 1970-01-01. 
        
        -a  list all change log lines without filtering
        
    $PRG [-s folder] tags [-a|subfolder] [partial date]
        list #- and @-tags in the changelog, filter on subfolder and 
        parts of a date on the format 1970-01-01.
        
    $PRG help
        show this help screen

    $PRG example
        show some examples of usage
        
    $PRG version
        show current version 
        
    $PRG [-s folder]
        list last week of logs
EOF
}

function cmd_example {
    cat <<EOF
adding lines to changelog:

    $PRG add -y -d it/infra/me "upgrade of #apache on @blogserver"
    $PRG add -y -d it/operator/otherperson "restarted @blogserver"
    $PRG add -y -d it/infra/otherperson "downgrade of #apache on @blogserver"

tree structure of all changelogs from all operators:

    $PRG list operator

list log entries for all in infra:

    $PRG log infra
    
list all tags used by infra:

    $PRG tags infra
    
list log entries for last week:

    $PRG last -- last week

list last two days from infra:

    $PRG last -d infra -- -2 days

list last week:

    $PRG  

init git repository:

   $PRG init

push git repository to sentral location:

    $PRG git push

pull changes from sentral location:

    $PRG git pull
EOF
}

PRG="${0##*/}"
CMD="$1"

DEF="${IDID_SUBFOLDER:-$USER}"
NOW_DATE=$(date -u +%F)
NOW_TIME=$(date -u +%T)
STR=${IDID_STORE:-"~/.idid"}
GIT=${IDID_STORE_GIT:-"$STR/.git"}

if [[ -d "$STR" ]] || ask "" "- create '$STR' store folder?"; then
    mkdir -p "$STR"
fi 

case "$CMD" in
    help|-h|--help)         shift;  cmd_help;;
    version|-v|--version)   shift;  cmd_version;;
    example|examples)       shift;  cmd_example;;
    ls|list|show)           shift;  cmd_ls $@;;
    log)                    shift;  cmd_log $@;;
    add)                    shift;  cmd_add $@;;
    tags)                   shift;  cmd_tags $@;;
    last)                   shift;  cmd_last $@;;
    git)                    shift;  cmd_git $@;;
    *) CMD="last";          cmd_last -- last week;;
esac

exit 0
